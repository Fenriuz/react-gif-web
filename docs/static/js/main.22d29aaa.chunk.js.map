{"version":3,"sources":["components/AddCategory.js","helpers/getGifs.js","hooks/useFetchGifs.js","components/GifGridItem.js","components/GifGrid.js","GiftExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","categories","type","value","onChange","target","getGifs","category","a","url","encodeURI","fetch","resp","json","data","gifs","map","img","id","title","images","downsized_medium","useFetchGifs","loading","state","setState","useEffect","then","GifGridItems","className","src","alt","GifGrid","GifGridItem","GiftExpertApp","ReactDOM","render","document","getElementById"],"mappings":"2MAiCeA,EA9BK,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,cAAoB,EACLC,mBAAS,IADJ,mBAClCC,EADkC,KACtBC,EADsB,KAezC,OACE,sBAAMC,SATa,SAACC,GACpBA,EAAEC,iBACEJ,EAAWK,OAAOC,OAAS,IAC7BR,GAAc,SAACS,GAAD,OAAiBP,GAAjB,mBAAgCO,OAC9CN,EAAc,MAKhB,SACE,uBACEO,KAAK,OACLC,MAAOT,EACPU,SAjBoB,SAACP,GACzBF,EAAcE,EAAEQ,OAAOF,a,uBCOZG,EAdF,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,6DACRC,EADQ,iDACwCC,UACpDH,GAFY,+DAIKI,MAAMF,GAJX,cAIRG,EAJQ,gBAKSA,EAAKC,OALd,uBAKNC,EALM,EAKNA,KACFC,EAAOD,EAAKE,KAAI,SAACC,GAAD,YAAU,CAC9BC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXV,IAAG,UAAEQ,EAAIG,cAAN,aAAE,EAAYC,iBAAiBZ,QATtB,kBAWPM,GAXO,4CAAH,sDCsBEO,EAnBM,SAACf,GAAc,IAAD,EACPd,mBAAS,CACjCqB,KAAM,GACNS,SAAS,IAHsB,mBAC1BC,EAD0B,KACnBC,EADmB,KAgBjC,OAVAC,qBAAU,WACRpB,EAAQC,GACLoB,MAAK,SAACZ,GACLU,EAAS,CACPX,KAAMC,EACNQ,SAAS,SAGd,CAAChB,IAEGiB,GCLMI,EAZM,SAAC,GAAD,IAAGT,EAAH,EAAGA,MAAOV,EAAV,EAAUA,IAAV,OACnB,sBAAKoB,UAAU,yCAAf,UACE,qBAAKC,IAAKrB,EAAKsB,IAAKZ,IACpB,4BAAIA,QCkBOa,EAnBC,SAAC,GAAkB,IAAhBzB,EAAe,EAAfA,SAAe,EACEe,EAAaf,GAAjCa,EADkB,EACxBN,KAAcS,EADU,EACVA,QAEtB,OACE,qCACE,oBAAIM,UAAU,oCAAd,SAAmDtB,IAClDgB,GAAW,mBAAGM,UAAU,mCAAb,wBACZ,qBAAKA,UAAU,YAAf,SACGT,EAAOJ,KAAI,gBAAGE,EAAH,EAAGA,GAAIC,EAAP,EAAOA,MAAOV,EAAd,EAAcA,IAAd,OACV,cAACwB,EAAD,CAAsBd,MAAOA,EAAOV,IAAKA,GAAvBS,YCUbgB,EAnBO,WAAO,IAAD,EACUzC,mBAAS,CAC3C,oBAFwB,mBACnBQ,EADmB,KACPT,EADO,KAK1B,OACE,qCACE,+CACA,cAAC,EAAD,CAAaA,cAAeA,IAC5B,uBACA,6BACGS,EAAWe,KAAI,SAACT,GAAD,OACd,cAAC,EAAD,CAAwBA,SAAUA,GAApBA,Y,MCVxB4B,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.22d29aaa.chunk.js","sourcesContent":["import { useState } from 'react';\nimport PropTypes from 'prop-types';\n\nconst AddCategory = ({ setCategories }) => {\n  const [inputValue, setInputValue] = useState('');\n\n  const handleInputChange = (e) => {\n    setInputValue(e.target.value);\n  };\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    if (inputValue.trim().length > 2) {\n      setCategories((categories) => [inputValue, ...categories]);\n      setInputValue('');\n    }\n  };\n\n  return (\n    <form onSubmit={handleSubmit}>\n      <input\n        type=\"text\"\n        value={inputValue}\n        onChange={handleInputChange}\n      />\n    </form>\n  );\n};\n\nAddCategory.propTypes = {\n  setCategories: PropTypes.func.isRequired,\n};\n\nexport default AddCategory;\n","const getGifs = async (category) => {\n  const url = `https://api.giphy.com/v1/gifs/search?q=${encodeURI(\n    category,\n  )}&limit=10&api_key=HKZXIMf3I2Un6DPEaLbR9INTXlAwPt9P`;\n  const resp = await fetch(url);\n  const { data } = await resp.json();\n  const gifs = data.map((img) => ({\n    id: img.id,\n    title: img.title,\n    url: img.images?.downsized_medium.url,\n  }));\n  return gifs;\n};\n\nexport default getGifs;\n","import { useState, useEffect } from 'react';\nimport getGifs from '../helpers/getGifs';\n\nconst useFetchGifs = (category) => {\n  const [state, setState] = useState({\n    data: [],\n    loading: true,\n  });\n\n  useEffect(() => {\n    getGifs(category)\n      .then((gifs) => {\n        setState({\n          data: gifs,\n          loading: false,\n        });\n      });\n  }, [category]);\n\n  return state;\n};\n\nexport default useFetchGifs;\n","import PropTypes from 'prop-types';\n\nconst GifGridItems = ({ title, url }) => (\n  <div className=\"card animate__animated animate__fadeIn\">\n    <img src={url} alt={title} />\n    <p>{title}</p>\n  </div>\n);\n\nGifGridItems.propTypes = {\n  title: PropTypes.string.isRequired,\n  url: PropTypes.string.isRequired,\n};\n\nexport default GifGridItems;\n","import PropTypes from 'prop-types';\nimport useFetchGifs from '../hooks/useFetchGifs';\nimport GifGridItem from './GifGridItem';\n\nconst GifGrid = ({ category }) => {\n  const { data: images, loading } = useFetchGifs(category);\n\n  return (\n    <>\n      <h3 className=\"animate__animated animate__fadeIn\">{category}</h3>\n      {loading && <p className=\"animate__animated animate__flash\">Loading...</p>}\n      <div className=\"card-grid\">\n        {images.map(({ id, title, url }) => (\n          <GifGridItem key={id} title={title} url={url} />\n        ))}\n      </div>\n    </>\n  );\n};\nGifGrid.propTypes = {\n  category: PropTypes.string.isRequired,\n};\n\nexport default GifGrid;\n","import { useState } from 'react';\nimport AddCategory from './components/AddCategory';\nimport GifGrid from './components/GifGrid';\n\nconst GiftExpertApp = () => {\n  const [categories, setCategories] = useState([\n    'High Definition',\n  ]);\n\n  return (\n    <>\n      <h2>GiftExpertApp</h2>\n      <AddCategory setCategories={setCategories} />\n      <hr />\n      <ol>\n        {categories.map((category) => (\n          <GifGrid key={category} category={category} />\n        ))}\n      </ol>\n    </>\n  );\n};\n\nexport default GiftExpertApp;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport GiftExpertApp from './GiftExpertApp';\nimport 'animate.css';\n\nReactDOM.render(\n  <GiftExpertApp />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}